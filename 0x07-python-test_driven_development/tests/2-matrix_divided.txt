===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Prototype: def matrix_divided(matrix, div):
Matrix must be a list of lists of integers or floats, otherwise raise
a TypeError exception with the message matrix must be a
matrix (list of lists) of integers/floats
Each row of the matrix must be of the same size, otherwise raise a TypeError
exception with the message 'Each row of the matrix must have the same size'
div must be a number (integer or float),
otherwise raise a TypeError exception with the message div must be a number
div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError exception with the message division by zero
All elements of the matrix should be divided by div, rounded to 2 decimal places
Returns a new matrix
You are not allowed to import any module


Matrix of Numbers
=======

``matrix_divided()`` returns new matrix divided by div.  For numbers,
that value is equivalent to using the ``/`` operator.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[10, 20], [8, 6]], 2)
    [[5, 10], [4, 3]]
    >>> matrix_divided([[0, 20], [8, 0]], 2)
    [[0.0, 10], [4, 0.0]]

It also works with floating-point values.

::

    >>> matrix_divided([[10, 10.5], [8.3, 6]], 2)
    [[5, 5.25], [4.15, 3]]
    >>> matrix_divided([[0, 10.5], [8.3, 0]], 2)
    [[0.0, 5.25], [4.15, 0.0]]

Negative values.

::

    >>> matrix_divided([[-10, 10.5], [-8.3, 6]], 2)
    [[-5, 5.25], [-4.15, 3]]
    >>> matrix_divided([[0, -10.5], [8.3, 0]], 2)
    [[0.0, -5.25], [4.15, 0.0]]

Empty list and matrix and div.

::

    >>> matrix_divided([[9, 3], [], []], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([], 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Only 1 argument

::

    >>> matrix_divided([[1], [2], [3]])
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided(3)
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

No argument

::

    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'


More than 2 arguments

::

    >>> matrix_divided([[0, -10.5], [8.3, 0]], 2, 3)
    Traceback (most recent call last):
    TypeError: matrix_divided() takes from 1 to 2 positional arguments but 3 were given

Overflow

::

    >>> matrix_divided([[1, 2], [3, 3]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

    >>> matrix_divided([[float('inf'), 2], [3, float('-inf')]], 2)
    [[inf, 1.0], [1.5, -inf]]

Division by zero

::

    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2], [3, 4]], 0.00)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Non equal size matrix

::

    >>> matrix_divided([[1, 2, 3], [1], [1, 2, 3]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Non-Numbers in matrix or div
============================

Expect a matrix must be a list of lists of integers or floats, otherwise raise
a TypeError exception with the message ``matrix must be a matrix (list of lists) of integers/floats``
if any arg isn't integer or float.

    >>> x = str("Hello World")
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> x = 'c'
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> x = tuple(("apple", "lemon", "cherry"))
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> x = list(("element1", "element2", "element3"))
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> x = bool(5)
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> x = dict(name="Sebastian", age=33)
    >>> matrix_divided([[1, 2], [3, 4], [3,14, 2,8]], x)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, x], [3, 4], [x, 2,8]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
